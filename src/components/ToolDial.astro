<script is:inline src="https://www.geogebra.org/apps/deployggb.js"></script>

<div data-dial-init class="fixed top-6 end-6 group" style="margin-top: 75px;">
  <button
    id="closeDial-ggb"
    type="button"
    data-dial-toggle="speed-dial-menu-top-right"
    aria-controls="speed-dial-menu-top-right"
    aria-expanded="false"
    class="flex items-center justify-center text-white bg-meca-mainBlue rounded-full w-14 h-14 hover:bg-meca-secondaryBlue dark:bg-meca-midBlue dark:hover:bg-meca-lightBlue focus:ring-4 focus:ring-meca-lightBlue focus:outline-none dark:focus:ring-meca-secondaryBlue"
  >
    <svg
      class="w-5 h-5 transition-transform group-hover:rotate-45"
      aria-hidden="true"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 18 18"
    >
      <path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M9 1v16M1 9h16"></path>
    </svg>
    <span class="sr-only">Abrir men√∫</span>
  </button>
  <div
    id="speed-dial-menu-top-right"
    class="flex flex-col items-center hidden mt-4 space-y-2"
  >
    <button
      id="graphingButton-ggb"
      type="button"
      class="flex justify-center items-center w-[52px] h-[52px] text-meca-midBlue hover:text-meca-mainBlue bg-white rounded-full border border-meca-lightBlue dark:border-meca-midBlue shadow-sm dark:hover:text-meca-lightestBlue dark:text-meca-lightBlue hover:bg-meca-lightestBlue dark:bg-meca-secondaryBlue dark:hover:bg-meca-mainBlue focus:ring-4 focus:ring-meca-lightBlue focus:outline-none dark:focus:ring-meca-midBlue"
    >
      <a href="https://www.geogebra.org/calculator" target="_blank">
        <svg
          class="w-5 h-5"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path d="M5 20h10a1 1 0 0 0 1-1v-5H4v5a1 1 0 0 0 1 1Z"></path>
          <path
            d="M18 7H2a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2v-3a2 2 0 1 1 2-2h12a2 2 0 1 1 2 2v3a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2Zm-1-2V2a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3h14Z"
          ></path>
        </svg>
      </a>
      <span class="sr-only">GeoGebra</span>
    </button>

    <button
      id="geometryButton-ggb"
      type="button"
      class="flex justify-center items-center w-[52px] h-[52px] text-meca-midBlue hover:text-meca-mainBlue bg-white rounded-full border border-meca-lightBlue dark:border-meca-midBlue shadow-sm dark:hover:text-meca-lightestBlue dark:text-meca-lightBlue hover:bg-meca-lightestBlue dark:bg-meca-secondaryBlue dark:hover:bg-meca-mainBlue focus:ring-4 focus:ring-meca-lightBlue focus:outline-none dark:focus:ring-meca-midBlue"
    >
      Geometry
    </button>

    <button
      id="casButton-ggb"
      type="button"
      class="flex justify-center items-center w-[52px] h-[52px] text-meca-midBlue hover:text-meca-mainBlue bg-white rounded-full border border-meca-lightBlue dark:border-meca-midBlue shadow-sm dark:hover:text-meca-lightestBlue dark:text-meca-lightBlue hover:bg-meca-lightestBlue dark:bg-meca-secondaryBlue dark:hover:bg-meca-mainBlue focus:ring-4 focus:ring-meca-lightBlue focus:outline-none dark:focus:ring-meca-midBlue"
    >
      CAS
    </button>

    <button
      id="3dButton-ggb"
      type="button"
      class="flex justify-center items-center w-[52px] h-[52px] text-meca-midBlue hover:text-meca-mainBlue bg-white rounded-full border border-meca-lightBlue dark:border-meca-midBlue shadow-sm dark:hover:text-meca-lightestBlue dark:text-meca-lightBlue hover:bg-meca-lightestBlue dark:bg-meca-secondaryBlue dark:hover:bg-meca-mainBlue focus:ring-4 focus:ring-meca-lightBlue focus:outline-none dark:focus:ring-meca-midBlue"
    >
      3D
    </button>

    <button
      id="scientificButton-ggb"
      type="button"
      class="flex justify-center items-center w-[52px] h-[52px] text-meca-midBlue hover:text-meca-mainBlue bg-white rounded-full border border-meca-lightBlue dark:border-meca-midBlue shadow-sm dark:hover:text-meca-lightestBlue dark:text-meca-lightBlue hover:bg-meca-lightestBlue dark:bg-meca-secondaryBlue dark:hover:bg-meca-mainBlue focus:ring-4 focus:ring-meca-lightBlue focus:outline-none dark:focus:ring-meca-midBlue"
    >
      Scientific
    </button>
  </div>
</div>

<div id="draggableGGB">
  <div id="draggableGGBHeader" class="bg-meca-mainBlue text-white">
    GeoGebra (BETA)
  </div>
  <div id="ggb-element"></div>
</div>

<script>
  declare const GGBApplet: any;

  document.addEventListener("DOMContentLoaded", function () {
    function getAppNameById(buttonId: any) {
      switch (buttonId) {
        case "graphingButton-ggb":
          return "graphing";
        case "geometryButton-ggb":
          return "geometry";
        case "casButton-ggb":
          return "cas";
        case "3dButton-ggb":
          return "3d";
        case "scientificButton-ggb":
          return "scientific";
        default:
          return "graphing"; // default appName
      }
    }

    document.querySelectorAll("button").forEach((button) => {
      if (button.id.endsWith("-ggb")) {
        button.addEventListener("click", function () {
          const appName = getAppNameById(button.id);
          const params = {
            appName: appName,
            width: 800,
            height: 600,
            showToolBar: true,
            showAlgebraInput: true,
            showMenuBar: true,
          };
          const applet = new GGBApplet(params, true);

          const draggableElement = document.getElementById("draggableGGB");
          if (draggableElement) {
            draggableElement.style.display = "block";
            applet.inject("ggb-element");
          }
        });
      }
    });

    const draggableElement = document.getElementById("draggableGGB");
    if (draggableElement) {
      dragElement(draggableElement);
    }

    function dragElement(element: any) {
      let pos1 = 0,
        pos2 = 0,
        pos3 = 0,
        pos4 = 0;
      const header = document.getElementById(element.id + "Header");

      if (header) {
        header.onmousedown = dragMouseDown;
      } else {
        element.onmousedown = dragMouseDown;
      }

      function dragMouseDown(e: any) {
        e = e || window.event;
        e.preventDefault();
        pos3 = e.clientX;
        pos4 = e.clientY;
        document.onmouseup = closeDragElement;
        document.onmousemove = elementDrag;
      }

      function elementDrag(e: any) {
        e = e || window.event;
        e.preventDefault();
        pos1 = pos3 - e.clientX;
        pos2 = pos4 - e.clientY;
        pos3 = e.clientX;
        pos4 = e.clientY;
        element.style.top = element.offsetTop - pos2 + "px";
        element.style.left = element.offsetLeft - pos1 + "px";
      }

      function closeDragElement() {
        document.onmouseup = null;
        document.onmousemove = null;
      }
    }

    const closeButton = document.getElementById("closeDial-ggb");
    if (closeButton) {
      closeButton.addEventListener("click", function () {
        const draggableElement = document.getElementById("draggableGGB");
        if (draggableElement) {
          draggableElement.style.display = "none";
        }
      });
    }
  });
</script>

<style>
  #draggableGGB {
    display: none;
    position: absolute;
    z-index: 9;
    background-color: #f1f1f1;
    border: 1px solid #d3d3d3;
    text-align: center;
  }

  #draggableGGBHeader {
    padding: 10px;
    cursor: move;
    z-index: 10;
  }
</style>
